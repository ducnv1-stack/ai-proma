name: Deploy to Production

on:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
      

    - name: Login to Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.PAT_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build & Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VM_IP }}
        username: chinhnk1
        key: ${{ secrets.VM_SSH_KEY }}
        script: |
          set -e
          echo "Starting deployment..."
          
          # Create ai-server directory for config files
          mkdir -p ~/ai-server
          cd ~/ai-server
          
          # Check required config files in ai-server folder
          if [ ! -f "service_account.json" ]; then
            echo "Error: service_account.json not found in ~/ai-server/"
            echo "Please copy your service_account.json to ~/ai-server/service_account.json"
            exit 1
          fi
          
          if [ ! -f ".env" ]; then
            echo "Error: .env not found in ~/ai-server/"
            echo "Please create .env file in ~/ai-server/.env"
            exit 1
          fi
          
          echo "Config files found:"
          echo "- service_account.json: $(ls -lh service_account.json)"
          echo "- .env: $(ls -lh .env)"
          
          # Login to GitHub Registry
          echo "${{ secrets.PAT_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          # Pull latest Docker image
          echo "Pulling Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Stop old container
          echo "Stopping old container..."
          docker stop ai-server 2>/dev/null || true
          docker rm ai-server 2>/dev/null || true
          
          # Start new container with config files from ai-server folder
          echo "Starting new container..."
          docker run -d \
            --name ai-server \
            --restart unless-stopped \
            -p 8000:8000 \
            -v $(pwd)/service_account.json:/app/service_account.json:ro \
            -v $(pwd)/.env:/app/.env:ro \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Wait for container to start
          echo "Waiting for container to start..."
          sleep 10
          
          echo "Container status:"
          docker ps --filter name=ai-server
          
          echo "Deployment successful!"
          echo "Config folder: ~/ai-server"

    - name: Cleanup Images
      if: always()
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VM_IP }}
        username: chinhnk1
        key: ${{ secrets.VM_SSH_KEY }}
        script: |
          echo "Cleaning up old images..."
          docker image prune -f || true

    - name: Success Notification
      if: success()
      run: |
        echo "Deployment completed successfully!"
        echo "Service: http://${{ secrets.VM_IP }}:8000"
        echo "API Docs: http://${{ secrets.VM_IP }}:8000/docs"
        echo "Agents API: http://${{ secrets.VM_IP }}:8000/agents/"
        echo "Config folder: ~/ai-server"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
